---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${NORMALIZED_APP_NAME}-pvc
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 500Mi
---
apiVersion: v1
data:
  .dockerconfigjson: eyJhdXRocyI6eyJsb2NhbGhvc3Q6NTAwMCI6eyJ1c2VybmFtZSI6Im1ibGNvbnRhaW5lcml6ZSIsInBhc3N3b3JkIjoiMTIzIiwiZW1haWwiOiJtb2hhbW1lZC5ibGFsQGdtYWlsLmNvbSIsImF1dGgiOiJiV0pzWTI5dWRHRnBibVZ5YVhwbE9qRXlNdz09In19fQ==
kind: Secret
metadata:
  creationTimestamp: null
  name: myregistrykey
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
data:
  password: Y2xpbmljX3B3ZA==
  username: Y2xpbmljX3VzZXI=
kind: Secret
metadata:
  creationTimestamp: null
  name: ${NORMALIZED_APP_NAME}-db-credentials
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: ${NORMALIZED_APP_NAME}
  name: ${NORMALIZED_APP_NAME}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${NORMALIZED_APP_NAME}
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: ${NORMALIZED_APP_NAME}
    spec:
      containers:
      - image: ${DOCKER_REPO_URL}/${DOCKER_IMAGE_NORMALIZED_NAME}
        name: ${DOCKER_IMAGE_NORMALIZED_NAME}
        volumeMounts:
        - name: ${NORMALIZED_APP_NAME}-pv
          mountPath: /opt/uploads
        resources: {}
        env:
        - name: NODE_ENV
          value: ${TARGET_ENV}
        - name: DB_LOGIN
          valueFrom:
            secretKeyRef:
              name: ${NORMALIZED_APP_NAME}-db-credentials
              key: username
              optional: false
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ${NORMALIZED_APP_NAME}-db-credentials
              key: password
              optional: false
      volumes:
      - name: ${NORMALIZED_APP_NAME}-pv
        persistentVolumeClaim:
          claimName: ${NORMALIZED_APP_NAME}-pvc
      imagePullSecrets:
      - name: myregistrykey
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: ${NORMALIZED_APP_NAME}
  name: ${NORMALIZED_APP_NAME}
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    app: ${NORMALIZED_APP_NAME}
  type: NodePort
status:
  loadBalancer: {}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${NORMALIZED_APP_NAME}-ingress
spec:
  ingressClassName: nginx
  tls:
  - hosts:
      - medical.ledger.ma
    secretName: tngr-app-secret # this secret name is already created by the admin on the k8s cluster
  rules:
  - host: "medical.ledger.ma"
    http:
      paths:
        - pathType: Prefix
          path: "/"
          backend:
            service:
              name: ${NORMALIZED_APP_NAME}
              port:
                number: 80
